# SonarQube manual/build-based analysis configuration for SQL Injection Demo
# Use this file for local SonarQube server or manual analysis with build wrapper

sonar.projectKey=sql-injection-cpp-demo
sonar.projectName=SQL Injection C++ Demo
sonar.projectVersion=1.0

# Source code settings
sonar.sources=src,include
sonar.sourceEncoding=UTF-8

# Language settings for C++
sonar.language=cpp
sonar.cxx.file.suffixes=.cpp,.cc,.cxx
sonar.cxx.headerFile.suffixes=.h,.hpp,.hxx

# Build wrapper and compilation database (for manual analysis)
sonar.cfamily.build-wrapper-output=build-wrapper-output
sonar.cfamily.compile-commands=build/compile_commands.json

# Coverage settings (optional)
sonar.cfamily.gcov.reportsPath=build/coverage
sonar.cfamily.llvm-cov.reportPath=build/coverage/coverage.txt

# Test settings (if you add tests later)
sonar.tests=tests
sonar.test.inclusions=**/*test*.cpp,**/*Test*.cpp

# Exclusions
sonar.exclusions=build/**,cmake-build-*/**,**/CMakeFiles/**,*.db

# Security hotspot rules - ensure SQL injection detection is enabled
sonar.security.hotspots.enable=true

# Enable taint analysis for security vulnerabilities
sonar.cfamily.taint.enable=true

# Additional analysis parameters
sonar.cfamily.cache.enabled=false
sonar.cfamily.threads=4
